# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "ubuntu/jammy64"
  # config.vm.hostname = "djangovm"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  config.vm.network "forwarded_port", guest: 8000, host: 8000

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private netdwork, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "./shared_repo/", "/home/vagrant/my_django_project", type: "virtualbox"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    vb.name = "django_vm_03_Final"
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
    vb.memory = "2048"
    vb.cpus = 4
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    sudo apt-get -y update
  #   apt-get install -y apache2
    sudo apt-get install -y python3-pip
  # After this operation, 239 MB of additional disk space will be used.
    sudo apt-get install -y python3-venv
  # After this operation, 2891 kB of additional disk space will be used.
    #(dependance systeme a l'installation du package python psycopg2)  
    sudo apt install -y libpq-dev 
  # After this operation, 13.0 MB of additional disk space will be used.
    sudo apt install -y postgresql
  # After this operation, 162 MB of additional disk space will be used.
    
    sudo apt install -y redis-server
  
  # Necessaire pour utiliser gettext (Django translate)
    # sudo apt-get install gettext


    # sudo apt-get install sqlite3


    #user postrges crée automatiquement sur Ubuntu/Debian mais necessité de le créer sur macOS
        # createuser -s postgres
        # psql -U postgres -c "CREATE DATABASE formationdjango;"
        # psql -U postgres -c "CREATE USER djangouser WITH PASSWORD 'secret';"
        # psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE djangoformation TO djangouser;"


    sudo -u postgres psql -c "CREATE DATABASE djangoformation;"
    sudo -u postgres psql -c "CREATE USER djangouser WITH PASSWORD 'secret';"
    sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE djangoformation TO djangouser;"
    # Donner la permission de creer des DB a djangouser (notamment pour les tests django)
    sudo -u postgres psql -c "ALTER ROLE djangouser CREATEDB;"

    # Pour donner a l'utilisateur postgres acces au repertoire (message d'erreur au lancement de postrgesql)
    # sudo chown postgres:postgres /home/vagrant/my_django_project

    
    python3 -m venv django_venv
    #Permission accorde a l'utilisateur vagrant pour installer des paquets
    sudo chown -R vagrant:vagrant /home/vagrant/django_venv
    # source django_venv/bin/activate
    # sudo python3 -m pip install -r my_django_project/ORM/requirements.txt
    # python manage.py runserver 0.0.0.0:80 (Pour ecouter sur tout les interfaces)
  SHELL
end


# faire un df -h dans la VM directement
# cleaner repo vagrant 
# rm -rf ~/.vagrant.d/gems ~/.vagrant.d/data ~/.vagrant.d/insecure_private_keys ~/.vagrant.d/setup_version ~/.vagrant.d/rgloader ~/.vagrant.d/plugins.json ~/.vagrant.d/insecure_private_key ~/.vagrant.d/bundler
# vagrant box list Les box inutiles
