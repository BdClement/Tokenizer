***** Dépendances *****

Installation de l'extension VSCode "Truffle for VS Code"

-   Node Version Manager : permet de gerer plusieurs version de Node.js sur la meme machine
    nvm 0.39.0
-   Node.js : Environnement d'éxecution JavaScript coté serveur. Truffle, Ganache et les outils de développement s'appuient dessus
    node LTS version v16.14.0 => nvm use node v16.14.0
-   Node Package Manager : permet d'installer les dépendances (Truffle, Ganache CLI, HDWalletProvider, etc.)
    npm v8.3.1
-   git
-   > npm i -g truffle : Framework de développement pour les smart contract EVM
    > npm i -g ganache : Noeud Ethereum local (comme Alchemy mais tournant en local)


***** Commandes *****

nvm ls-remote --lts : lister les versions LTS disponible via nvm

npm init -y : Créer un projet Node.js
npm install truffle@5.11.5 : installer une version de truffle propre au projet 
npm install ganache@7.9.1 : installer une version de ganache propre au projet 

truffle init : initialise un projet truffle
truflle compile : compile les smart-contracts

npm install : installe les dependances presentes dans package.json

npm install @openzeppelin/contracts
npm install --save-dev chai-bn
npm install --save-dev chai-as-promised

npm install @truffle/hdwallet-provider
npm install dotenv

truffle migrate --f 3 --to 3  --network bscTestnet [ deployer uniquement la 3e migrations ]
 npx truffle exec scripts/interact.js --network bscTestnet
 npx truffle compile 



rappel :
package.json est la liste des dépendances du projet 
package-lock.json précise la version de chacune des dépendances
node_modules/ contient les librairies installées via npm. npm install permet a n'import qui de réinstaller ces bibliothèques sur une autre machine

***** Librairie web3 *****

Pour interagir avec la blockchain que ce soit dans mes tests ou mes scripts, j'utilise la librairie web3.js.
Cette librairie est utilise par Truffle nativement pour faciliter l'interaciton. 

Pour faire une Dapp et interagir avec la blockchain, ethers.js est une librairie web3 plmus moderne et orienté dev


***** Tests *****

Pour lancer les tests, on utilise la commande truffle test
On a besoin d'avoir lancé une blockchain local en parallèle. On peu utiliser ganache avec npx ganache, "truffle migrate --network development" (se connecter a un réseau defini dans config), ou truffle develop (interne a truffle)
Truffle utilise Mocha (Framework de test JS) + Chai (librairie d'assertion)
On utilise ici :
    - contract() équivalent de describe() pour regrouper des tests
    - it() pour chaque scenario de test
    - fonction async/await puisque la blockchain est asynchrone
    - assert ou expect pour verifier les tests
Pour verifier les assertions, on privilie expect qui est plus recommandé pour les tests modernes de par sa fluidité de lecture

artifacts est comme un import mais pour charger un contrat compilé avec son ABI
accounts est une liste d'accounts fournit par truffle

Truffle offre la fonction context pour séparer des groupes de tests propres a des situations précises
Truffle offre une instance de web3 qui permet des appels a un rpc comme par exemple web3.eth.getBalance
x peut etre placé devant context ou it pour que Truffle ne prenne pas en compte ce test

Les nombres lors de test sont exprimés de manière différent : uint256 en Solidity. Comme en Javascript uint256
n'existe pas on utilise des objets JavaScript BN pour éviter les erreurs de précisions que JavaScript introduirait
avec ses Number classiques. 
Un BN est un BigNumber - une représentation d’un nombre entier très grand
Pour comparer des big numbers il faut installer le plugin chain-bn ou chai-bigint
Truffle installe comme dépendance mocha(Framework de test), chai(librairies d'assertions), web3(librairie js pour interagir avec Ethereum)
Il n'installe pas chai-bn(BigNumber), test-helpers de openzeppelin (utils pour les tests)
Des lors que le plugin est installé, on peut importer dans les fichiers de tests concerné ce dont on a besoin

On a besoin d'un plugin comme chai-as-promised pour tester les reverts 
On pourrait cependant tester via des try and catch mais c'est moins propre


***** JS rappel *****

Declarer une function simple function nom() { ... }
Déclarer une function fléché const f = (x) => x * 2;
Gérer une promesse const result = await appelAsync();
Test fucntion dans Mocha it('description', async function() { ... });


***** Questions *****

***** Astuces *****
Pour éviter d'engorger le réseau avec enormément d'instance d'un smart contract on peut utiliser selfdestruct en prévoyant une fonction dans le smart contract 
destiné a kill une instance lorsqu'elle n'est plus nécéssaire


***** Solidity *****

address, uint256 sont des types simples, on les passe par valeur en Solidity
bytes est un type complexe, on doit spécifier au compilateur ou sont stockées ces données
En Solidity, calldata est utilisé pour recevoir des données externes et les stockées en dehors du contrat donc pas modifiables et moins cher a lire

Un modifier est utilisé pour faire une verification avant l'execution de la fonction
Le Merge Wildcard (_;) placé après effectue le check avant l'executon de la function et inversement

Une function view ne modifie rien mais accède a des données du contrat. Une function pure ne modifie ni n'accède a rien sur le contrat.
Pour la gestion d'erreur en Solidity on utilise require ou revert.

storage est le stockage sur la blockchain, c'est l'etat du contrat, et le plus cher en terme de gas
memory, c'est comme la RAM c'est de la mémoire temporaire, un peu cher en gas car copie de la valeur mais moins cher que de stocker dans le storage
calldata ne stocke pas la donnée, elle est attachée a l'appel, c'est donc le moins cher

En solidity, call est une fonction bas niveau qui permet :
- d'appeler n'importe quel contrat
- lui envoyé de l'ether eventuellement
- lui transmettre des données encodées (function + argument)

Pour appeler une function en bas niveau (avec call par exemple), il faut encodé la function et ses arguments
Pour cela, on a 2 methodes :
    - On passe par l'abi qu'on recupère grace a artifacts
      On doit obtenir d'une interface qui est juste un descripeur de fonction (ex avec Web.js new web3.eth.Contract(MonContrat.abi); )
      Puis grace a cette interface on encode (ex avec Web3.js face.methods.maFonction(arg1, arg2).encodeABI(); )
    - On passe par une instance du contrat directement
        (ex avec Web3.js contractinstanceWeb3.methods.treansfer(args).encodeABI(); )


***** Deploiement *****

Le déploiement nécessite une compilation effectué avec "truffle comiple"
Le dossier migrations/ créer lors du "truffle init" contient les instructions de deploiement des smart contract
Pour creer un fichier de migrations pour un smart contract peux utiliser "truffle create migration MyContract"
Pour deployer le contrat on utilise ensuite "truffle migrate" qui utilisera les fichiers de Migrations pour deployer les contrats

Avant de pouvoir déployer sur le tesnet de la BSC (ou un autre réseau) il faut ajouter ce réseau a truffle-config
Pour pouvoir ajouter un réseau, il faut pouvoir se connecter a un noeud (j'utilise Alchemy)
Les 2 options de noeuds sont :
- les noeud public par exemple proposé par Binance mais ces noeuds peuvent être instables
- utiliser HDWalletProvider (méthode recommandé) qui permet de se connecter a un noeud distant sécurisé (type Infura, Alchemy ...)
Pour utiliser ce noeud, il faut installer hdwallet-provider et dotenv pour proteger les données sensibles dans le code
Pour la configuration d'un réseau, on peut spécifier soit host/port soit provider mais pas les 2.
Pour s'assurer qu'un seul réseau est connecté a la fois, il faut set le provider comme une fucntion 


***** Script interagissant avec mes contrats *****

Pour faire un scripts JavaScript qui interagit aves des contrats sur une blockchain publique
J'ai fait ces scripts dans mon environnement Truffle qui favorise l'utilisation de web3 qui est deja configure avec HDWalletProvider
Sinon il aurait fallu faire un script brut hors Truffle et construire des instances de web3 que Truffle gere deja 
ou encore signe des transaction directement avec signTransaction() ou sendSignedTransaction()
Truffle simplifie les appels de function avec par exemple await contractInstance.methodName(args, { from })
la ou j'aurais fait en web3 natif await contractInstance.methods.methodName(args).send({ from })


***** Dapp *****
se connecter avec son address (garder l'adresse en memoire cote front ?)
Afficher ma balance d'EXT si connecté 
envoyer des EXT a quelqu'un 
approve + transferFrom (A reflechir)

Le front etant deja en Vanilla JS, je reste la dessus pour simplifier mais faire une Dapp en React sera la prochaine étape.
Pour gérer le rechargement de page pour la connection web3 coté front, je vais utiliser le localStroage du navigateur qui permet de stocker des données
clés-valeurs et donc de conserver les données après un rechargement ou fermeture. Il stocke uniquement des string et s'utilise par exemple avec :
- localStorage.setItem()
- localStorage.getItem()
- localStorage.removeItem()
- localStorage.clear()

Le localStroage est a mettre en comparaison avec le sessionStorage (present jusqu'a fermeture de l'onglet), les cookies etc..

window.ethereum est un objet JavaScript injecté lors de l'installation de Rabby ou Metamask.
ethers.js utilise window.ethereum pour communiquer avec un wallet


***** Verification du contrat par l'explorer *****

Lorque l'on déploie un smart contract sur lma blockchain, suel le bytecode est visible sur la blockchain. C'est illisible.
Verifier le contrat par un explorer permet de publier le code source lisible et compréhensible sur l'explorer de manière publique et transparente.
Cela rassure les utilisateurs.

Pour faire cela, il existe 3 méthode principales :
- Manuelle sur l'explorer (interface Web) : C'est compliqué si le contrat a divers import puisqu'il faut copier manuellement tous les fichiers en respectant les bons noms.
- Automatisé avec Hardhat/Truffle et API BscScan : C'est la méthode la plus propre. Il faut crée une clé API sur l'explorer, configurer Harhat pour utiliser cette clé api et utiliser
    require("@nomicfoundation/hardhat-toolbox") avec "npx hardhat verify --network bscTestnet 0xADRESSE_CONTRAT "argument1" "argument2" "
- Avec Remix IDE : Il faut télécharger le fichier Standard JSON Input 

J'ai utilisé Truffle avec son plugin "'truffle-plugin-verify'" et sa commande "truffle run verify Token42  --network bscTestnet"
Concrètement Truffle utilise le fichier json dans build/contracts/ concernant la dernère instance du contrat Token42 deployé
L'explorer recompilera le code source avec les memes paramètres et verifie que le bytecode compilé correspond au bytecode déployé sur la blockchain.
D'ou l'interet de l'utilisation des framework comme Truffle et Harhdat.

La verification du contrat ne veut pas dire que le contrat est Safe, cela signifie simplement que le code source est auditable par tous.


***** A Faire *****

- Documenter documentation/ avec whitepaper [ À FINALISER ]
- Finir README

Demonstration de l'utilisation du token => Tests + Script js + Dapp
